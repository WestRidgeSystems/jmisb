package org.jmisb.mimd.v2.st1903;

import static org.testng.Assert.*;

import org.jmisb.api.common.KlvParseException;
import org.jmisb.mimd.IMimdMetadataValue;
import org.jmisb.mimd.v2.st1902.LoggerChecks;
import org.testng.annotations.Test;

/**
 * Additional unit tests for MIMD.
 *
 * <p>These are different between MIMD versions, so not autogenerated.
 */
public class AdditionalMIMDTest extends LoggerChecks {

    public AdditionalMIMDTest() {
        super(MIMD.class);
    }

    @Test
    public void parseFromBytesMimdId() throws KlvParseException {
        byte[] bytes =
                new byte[] {
                    0x06,
                    0x0E,
                    0x2B,
                    0x34,
                    0x02,
                    0x05,
                    0x01,
                    0x01,
                    0x0E,
                    0x01,
                    0x05,
                    0x04,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x07,
                    0x2c,
                    0x01,
                    0x02,
                    0x04,
                    0x03,
                    (byte) 0xea,
                    (byte) 0x63
                };
        verifyNoLoggerMessages();
        MIMD uut = new MIMD(bytes);
        verifyNoLoggerMessages();
        assertEquals(uut.getBytes(), bytes);
        assertNotNull(uut.getIdentifiers());
        assertEquals(uut.getIdentifiers().size(), 1);
        assertNotNull(uut.getField(MIMDMetadataKey.mimdId));
    }

    @Test(
            expectedExceptions = KlvParseException.class,
            expectedExceptionsMessageRegExp = "Bad MIMD Check Value")
    public void parseFromBytesMimdIdBadCrc0() throws KlvParseException {
        byte[] bytes =
                new byte[] {
                    0x06,
                    0x0E,
                    0x2B,
                    0x34,
                    0x02,
                    0x05,
                    0x01,
                    0x01,
                    0x0E,
                    0x01,
                    0x05,
                    0x04,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x07,
                    0x2c,
                    0x01,
                    0x02,
                    0x04,
                    0x03,
                    (byte) 0xeb,
                    (byte) 0x63
                };
        new MIMD(bytes);
    }

    @Test(
            expectedExceptions = KlvParseException.class,
            expectedExceptionsMessageRegExp = "Bad MIMD Check Value")
    public void parseFromBytesMimdIdBadCrc1() throws KlvParseException {
        byte[] bytes =
                new byte[] {
                    0x06,
                    0x0E,
                    0x2B,
                    0x34,
                    0x02,
                    0x05,
                    0x01,
                    0x01,
                    0x0E,
                    0x01,
                    0x05,
                    0x04,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x07,
                    0x2c,
                    0x01,
                    0x02,
                    0x04,
                    0x03,
                    (byte) 0xea,
                    (byte) 0x62
                };
        new MIMD(bytes);
    }

    @Test
    public void parseFromBytesBadTag() throws KlvParseException {
        verifyNoLoggerMessages();
        IMimdMetadataValue uut =
                new MIMD(
                        new byte[] {
                            0x06,
                            0x0E,
                            0x2B,
                            0x34,
                            0x02,
                            0x05,
                            0x01,
                            0x01,
                            0x0E,
                            0x01,
                            0x05,
                            0x04,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x0A,
                            0x0F,
                            0x7F,
                            0x01,
                            0x00,
                            0x01,
                            0x02,
                            0x04,
                            0x03,
                            (byte) 0xb7,
                            (byte) 0x29
                        });
        verifySingleLoggerMessage("Unknown MIMD Metadata id: 127");
        assertEquals(
                uut.getBytes(),
                new byte[] {
                    0x06,
                    0x0E,
                    0x2B,
                    0x34,
                    0x02,
                    0x05,
                    0x01,
                    0x01,
                    0x0E,
                    0x01,
                    0x05,
                    0x04,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x07,
                    0x2c,
                    0x01,
                    0x02,
                    0x04,
                    0x03,
                    (byte) 0xea,
                    (byte) 0x63
                });
    }

    @Test(
            expectedExceptions = KlvParseException.class,
            expectedExceptionsMessageRegExp = "Overrun encountered while parsing MIMD fields")
    public void parseFromBytesMimdIdBadValueLength() throws KlvParseException {
        byte[] bytes =
                new byte[] {
                    0x06,
                    0x0E,
                    0x2B,
                    0x34,
                    0x02,
                    0x05,
                    0x01,
                    0x01,
                    0x0E,
                    0x01,
                    0x05,
                    0x04,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x07,
                    0x2c,
                    0x01,
                    0x03,
                    0x04,
                    0x03,
                    (byte) 0xdd,
                    (byte) 0x53
                };
        new MIMD(bytes);
    }
}

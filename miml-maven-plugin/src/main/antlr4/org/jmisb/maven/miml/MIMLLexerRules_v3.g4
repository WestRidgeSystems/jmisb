/*
 * Copyright (c) 2021 National Geospatial Agency (NGA). This file is made available as is with no liability on NGA's part.
 * Users can make changes as needed with sole responsibility to provide NGA a copy if enhancements are made or issues are
 * corrected.
 *  
 * Lexer rules for Motion Imagery Modeling Language (MIML)
 * 
 * Do NOT edit this file unless you understand what you are doing - small changes to this file
 * will easily break the MIML grammar.
 *  
 * This set of lexer rules is divided into several modes to support a more succinct MIML. 
 * The default or top level separates the grammar into two sub-grammars or modes: classes and enumerations. 
 * The class mode invokes an attribute mode which in turn invokes an attribute info grammar. 
 * The enumeration mode invokes an enumeration item mode.   
 * 
 * Each mode defines what is allowed in the sub-grammar, if a rule is not listed in the sub-grammar
 * the rule does not apply in the sub-grammar - in other words rules in one sub-grammar DO NOT apply 
 * to another sub-grammar. For example the DOCUMENT rule defined in mode ACLASS does not work
 * if the lexer is operating in the default mode or the AINFOSTATUS mode. The modes prevent Ambiguous or 
 * overlapping lexer rules.   
 */
lexer grammar MIMLLexerRules_v3;  


//Top level 
MIMLVERPREFIX : 'MIML_Grammar=';
MIMLVER       : '3.0';
MODELVERPREFIX: 'Model_Version=';
MODELVERNUM   : UINT;
SEMI          : ';';
CLASS         : 'class' -> pushMode(ACLASS);
ENUMERATION   : 'enumeration' -> pushMode(AENUMERATION);   
WS            : [ \t\r\n]+ -> skip; // skip spaces, tabs
COMMENT       : '//' .*? '\r'? '\n' ->skip; 

//Class mode
mode ACLASS;
EXTENDS    : 'extends';
INCLUDES   : 'includes';
BODYSTART  : LBRACE;
DOCUMENT   : 'Document'; 
EQ         : '=';
SEMICOLON  : ';';
//Document names all start with ST then a '1' or '2', followed by three more numbers, then a period and possible a minor version letter.
//Starting in the year 2030 then '3' will be allowed for the first digit.
//E.g., ST1905.3a
DOCNAME    : 'ST' ('1' | '2' ) DIGIT DIGIT DIGIT (PERIOD DIGIT+)? LOWERCASE? ;
TAGID      : UINT ->   pushMode(ATTRIBUTE);
UINT       : DIGIT+;
CLASSNAME  : UPPERCASE (UPPERCASE | LOWERCASE | DIGIT)*; 
ENDBODY    : RBRACE ->popMode;
CLASSWS    : [ \t\r\n]+ -> skip; // skip spaces, tabs
CLASSCOMM  : '//' .*? '\r'? '\n' ->skip;

//Attribute mode
mode ATTRIBUTE;
UNDERSCORE : '_';
COLON      : ':';
LBRACKET   : '[';
RBRACKET   : ']';
LPAREN     : '(';
RPAREN     : ')';
COMMA      : ',';
LESSTHAN   : '<=';
LARR       : '<';
RARR       : '>';
STAR       : '*';
TUPLESTR   : 'Tuple';
REALSTR    : 'Real';
STRINGSTR  : 'String';
INTSTR     : 'Integer'; 
UINTSTR    : 'UInt';
BINARYSTR  : 'Boolean'; 
SPECSTR    : 'Spec'; 
REFSTR     : 'Ref' | 'REF';
LISTSTR    : 'List' | 'LIST';
RESERVEDSTR: 'RESERVED' ;
PISTR      : 'PI';
TWOPISTR   : 'TWO_PI';
HALFPISTR  : 'HALF_PI';
NONE       : 'None' | 'none' | 'NONE';
//If attributes only start with lowercase letters than AttribID and Class ID can be parsed separately. 
//Using IDENT to parse  both attribute and classname as a stop gap. 
IDENT      : LOWERCASE (UPPERCASE | LOWERCASE | DIGIT)*;
CLASSIDENT : UPPERCASE (UPPERCASE | LOWERCASE | DIGIT)*;
STARTINFO  : LBRACE ->pushMode(AINFOSTATUS); 
UINTVAL    : UINT;
PLUSMINUS  : [+-];
REALNUM    : PLUSMINUS?(UINT '.' UINT | UINT '.0' | '0.' UINT+) ([eE] PLUSMINUS? UINT)?;
NOVAL      : NONE;
ENDATTR    : SEMICOLON ->popMode;
ATTRIBWS   : [ \t\r\n]+ -> skip; // skip spaces, tabs
ATTRIBCOMM : COMMENT;

//Infostatus mode
mode AINFOSTATUS;
fragment QUOTE : '"';
fragment ESC: '\\"' | '\\\\';
ACOMMA     : ',';
NOUNITS    : NONE;
DEPRECATE  : 'DEPRECATED' ;
UNITSTAR   : STAR;
UNITSLASH  : '/';
UNITCARROT : '^';
//UNITS: (WORD '*' WORD) | (WORD '/' WORD) | (WORD '^' WORD) | WORD | SEEDESCRIPTIONSTR;
SEEDESCRIPTIONSTR: 'See Description';
WORD: (LOWERCASE | UPPERCASE | SYMBOL | DIGIT)+;
SYMBOL : DEGREE | MICRO | REPLACEMENTCHAR | PERCENT;
STRINGVALUE : '"' (ESC|.)*? '"';
ENDINFO    : RBRACE ->popMode;
INFOWS     : [ \t\r\n]+ -> skip; // skip spaces, tabs


//Enumeration Mode
mode AENUMERATION;
ENUMBODY   : LBRACE;
ENUMEQ     : '=';
ENUMSEMI   : ';';
VALUE      : UINT -> pushMode(ENUMITEM);
ENUMDOC    : DOCUMENT;
ENUMDOCNAME: DOCNAME;
ENUMNAME   : CLASSNAME;
ENDENUM    : RBRACE ->popMode;
ENUMWS     : [ \t\r\n]+ -> skip; // skip spaces, tabs
ENUMCOMM   : '//' .*? '\r'? '\n' ->skip;

mode ENUMITEM;
NAME       : (UPPERCASE | LOWERCASE ) (UNDERSCORE | UPPERCASE | LOWERCASE | DIGIT)*;
ITEMEQ     :'=';
ENDENUMITEM: ';' -> popMode;
ENUMTEXT   : '{' (ESC|.)*? '}';
ENUMITEMWS : [ \t\r\n]+ -> skip; // skip spaces, tabs
ENUMITEMCOMM: '//' .*? '\r'? '\n' ->skip;


 
// Fragments
fragment DIGIT    : [0-9]; 
fragment LOWERCASE  : [a-z];
fragment UPPERCASE  : [A-Z];
fragment LBRACE     : '{'; 
fragment RBRACE     : '}';
fragment PERIOD     : '.';  

//Fragments used for parsing metric units
fragment DEGREE          : '\u00B0';
fragment MICRO           : '\uC2B5' | '\u00B5';// | 'Âµ';
fragment REPLACEMENTCHAR : '\uFFFD';
fragment PERCENT         : '%';  




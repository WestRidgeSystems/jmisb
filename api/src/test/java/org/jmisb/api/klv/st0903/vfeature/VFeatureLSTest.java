package org.jmisb.api.klv.st0903.vfeature;

import org.jmisb.api.klv.LoggerChecks;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.Map;
import org.jmisb.api.common.KlvParseException;
import org.jmisb.api.klv.st0903.IVmtiMetadataValue;
import org.jmisb.api.klv.st0903.shared.VmtiTextString;
import org.jmisb.api.klv.st0903.shared.VmtiUri;
import static org.testng.Assert.*;
import org.testng.annotations.Test;

/**
 * Tests for the ST0903 VFeature LS.
 */
public class VFeatureLSTest extends LoggerChecks
{
    public VFeatureLSTest()
    {
        super(VFeatureLS.class);
    }

    @Test
    public void parseTag1() throws KlvParseException, URISyntaxException
    {
        final byte[] bytes = new byte[]{
            0x01, 45,
            0x75, 0x72, 0x6e, 0x3a, 0x75, 0x75, 0x69, 0x64,
            0x3a, 0x66, 0x38, 0x31, 0x64, 0x34, 0x66, 0x61,
            0x65, 0x2d, 0x37, 0x64, 0x65, 0x63, 0x2d, 0x31,
            0x31, 0x64, 0x30, 0x2d, 0x61, 0x37, 0x36, 0x35,
            0x2d, 0x30, 0x30, 0x61, 0x30, 0x63, 0x39, 0x31,
            0x65, 0x36, 0x62, 0x66, 0x36 };
        VFeatureLS localSet = new VFeatureLS(bytes);
        assertNotNull(localSet);
        assertEquals(localSet.getTags().size(), 1);
        checkSchemaExample(localSet);
    }

    @Test
    public void parseTag2() throws KlvParseException, URISyntaxException
    {
        final byte[] bytes = new byte[]{
            0x02,
            (byte)0x82, 0x01, 0x43,
            0x3C, 0x67, 0x6D, 0x6C, 0x3A, 0x44, 0x61, 0x74,
            0x61, 0x42, 0x6C, 0x6F, 0x63, 0x6B, 0x3E, 0x3C,
            0x67, 0x6D, 0x6C, 0x3A, 0x72, 0x61, 0x6E, 0x67,
            0x65, 0x50, 0x61, 0x72, 0x61, 0x6D, 0x65, 0x74,
            0x65, 0x72, 0x73, 0x3E, 0x3C, 0x67, 0x6D, 0x6C,
            0x3A, 0x43, 0x6F, 0x6D, 0x70, 0x6F, 0x73, 0x69,
            0x74, 0x65, 0x56, 0x61, 0x6C, 0x75, 0x65, 0x3E,
            0x3C, 0x67, 0x6D, 0x6C, 0x3A, 0x76, 0x61, 0x6C,
            0x75, 0x65, 0x43, 0x6F, 0x6D, 0x70, 0x6F, 0x6E,
            0x65, 0x6E, 0x74, 0x73, 0x3E, 0x3C, 0x54, 0x65,
            0x6D, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
            0x65, 0x20, 0x75, 0x6F, 0x6D, 0x3D, 0x22, 0x75,
            0x72, 0x6E, 0x3A, 0x78, 0x2D, 0x73, 0x69, 0x3A,
            0x76, 0x31, 0x39, 0x39, 0x39, 0x3A, 0x75, 0x6F,
            0x6D, 0x3A, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65,
            0x73, 0x43, 0x22, 0x3E, 0x74, 0x65, 0x6D, 0x70,
            0x6C, 0x61, 0x74, 0x65, 0x3C, 0x2F, 0x54, 0x65,
            0x6D, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
            0x65, 0x3E, 0x3C, 0x50, 0x72, 0x65, 0x73, 0x73,
            0x75, 0x72, 0x65, 0x20, 0x75, 0x6F, 0x6D, 0x3D,
            0x22, 0x75, 0x72, 0x6E, 0x3A, 0x78, 0x2D, 0x73,
            0x69, 0x3A, 0x76, 0x31, 0x39, 0x39, 0x39, 0x3A,
            0x75, 0x6F, 0x6D, 0x3A, 0x6B, 0x50, 0x61, 0x22,
            0x3E, 0x74, 0x65, 0x6D, 0x70, 0x6C, 0x61, 0x74,
            0x65, 0x3C, 0x2F, 0x50, 0x72, 0x65, 0x73, 0x73,
            0x75, 0x72, 0x65, 0x3E, 0x3C, 0x2F, 0x67, 0x6D,
            0x6C, 0x3A, 0x76, 0x61, 0x6C, 0x75, 0x65, 0x43,
            0x6F, 0x6D, 0x70, 0x6F, 0x6E, 0x65, 0x6E, 0x74,
            0x73, 0x3E, 0x3C, 0x2F, 0x67, 0x6D, 0x6C, 0x3A,
            0x43, 0x6F, 0x6D, 0x70, 0x6F, 0x73, 0x69, 0x74,
            0x65, 0x56, 0x61, 0x6C, 0x75, 0x65, 0x3E, 0x3C,
            0x2F, 0x67, 0x6D, 0x6C, 0x3A, 0x72, 0x61, 0x6E,
            0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6D, 0x65,
            0x74, 0x65, 0x72, 0x73, 0x3E, 0x3C, 0x67, 0x6D,
            0x6C, 0x3A, 0x74, 0x75, 0x70, 0x6C, 0x65, 0x4C,
            0x69, 0x73, 0x74, 0x3E, 0x33, 0x2C, 0x31, 0x30,
            0x31, 0x2E, 0x32, 0x3C, 0x2F, 0x67, 0x6D, 0x6C,
            0x3A, 0x74, 0x75, 0x70, 0x6C, 0x65, 0x4C, 0x69,
            0x73, 0x74, 0x3E, 0x3C, 0x2F, 0x67, 0x6D, 0x6C,
            0x3A, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6C, 0x6F,
            0x63, 0x6B, 0x3E
        };
        VFeatureLS localSet = new VFeatureLS(bytes);
        assertNotNull(localSet);
        assertEquals(localSet.getTags().size(), 1);
        checkSchemaFeatureExample(localSet);
    }

    @Test
    public void parseTagsWithUnknownTag() throws KlvParseException, URISyntaxException
    {
        final byte[] bytes = new byte[]{
            0x03, 0x02, (byte) 0x80, (byte) 0xCA, // No such tag
            0x01, 45,
            0x75, 0x72, 0x6e, 0x3a, 0x75, 0x75, 0x69, 0x64,
            0x3a, 0x66, 0x38, 0x31, 0x64, 0x34, 0x66, 0x61,
            0x65, 0x2d, 0x37, 0x64, 0x65, 0x63, 0x2d, 0x31,
            0x31, 0x64, 0x30, 0x2d, 0x61, 0x37, 0x36, 0x35,
            0x2d, 0x30, 0x30, 0x61, 0x30, 0x63, 0x39, 0x31,
            0x65, 0x36, 0x62, 0x66, 0x36,
            0x02,
            (byte)0x82, 0x01, 0x43,
            0x3C, 0x67, 0x6D, 0x6C, 0x3A, 0x44, 0x61, 0x74,
            0x61, 0x42, 0x6C, 0x6F, 0x63, 0x6B, 0x3E, 0x3C,
            0x67, 0x6D, 0x6C, 0x3A, 0x72, 0x61, 0x6E, 0x67,
            0x65, 0x50, 0x61, 0x72, 0x61, 0x6D, 0x65, 0x74,
            0x65, 0x72, 0x73, 0x3E, 0x3C, 0x67, 0x6D, 0x6C,
            0x3A, 0x43, 0x6F, 0x6D, 0x70, 0x6F, 0x73, 0x69,
            0x74, 0x65, 0x56, 0x61, 0x6C, 0x75, 0x65, 0x3E,
            0x3C, 0x67, 0x6D, 0x6C, 0x3A, 0x76, 0x61, 0x6C,
            0x75, 0x65, 0x43, 0x6F, 0x6D, 0x70, 0x6F, 0x6E,
            0x65, 0x6E, 0x74, 0x73, 0x3E, 0x3C, 0x54, 0x65,
            0x6D, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
            0x65, 0x20, 0x75, 0x6F, 0x6D, 0x3D, 0x22, 0x75,
            0x72, 0x6E, 0x3A, 0x78, 0x2D, 0x73, 0x69, 0x3A,
            0x76, 0x31, 0x39, 0x39, 0x39, 0x3A, 0x75, 0x6F,
            0x6D, 0x3A, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65,
            0x73, 0x43, 0x22, 0x3E, 0x74, 0x65, 0x6D, 0x70,
            0x6C, 0x61, 0x74, 0x65, 0x3C, 0x2F, 0x54, 0x65,
            0x6D, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
            0x65, 0x3E, 0x3C, 0x50, 0x72, 0x65, 0x73, 0x73,
            0x75, 0x72, 0x65, 0x20, 0x75, 0x6F, 0x6D, 0x3D,
            0x22, 0x75, 0x72, 0x6E, 0x3A, 0x78, 0x2D, 0x73,
            0x69, 0x3A, 0x76, 0x31, 0x39, 0x39, 0x39, 0x3A,
            0x75, 0x6F, 0x6D, 0x3A, 0x6B, 0x50, 0x61, 0x22,
            0x3E, 0x74, 0x65, 0x6D, 0x70, 0x6C, 0x61, 0x74,
            0x65, 0x3C, 0x2F, 0x50, 0x72, 0x65, 0x73, 0x73,
            0x75, 0x72, 0x65, 0x3E, 0x3C, 0x2F, 0x67, 0x6D,
            0x6C, 0x3A, 0x76, 0x61, 0x6C, 0x75, 0x65, 0x43,
            0x6F, 0x6D, 0x70, 0x6F, 0x6E, 0x65, 0x6E, 0x74,
            0x73, 0x3E, 0x3C, 0x2F, 0x67, 0x6D, 0x6C, 0x3A,
            0x43, 0x6F, 0x6D, 0x70, 0x6F, 0x73, 0x69, 0x74,
            0x65, 0x56, 0x61, 0x6C, 0x75, 0x65, 0x3E, 0x3C,
            0x2F, 0x67, 0x6D, 0x6C, 0x3A, 0x72, 0x61, 0x6E,
            0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6D, 0x65,
            0x74, 0x65, 0x72, 0x73, 0x3E, 0x3C, 0x67, 0x6D,
            0x6C, 0x3A, 0x74, 0x75, 0x70, 0x6C, 0x65, 0x4C,
            0x69, 0x73, 0x74, 0x3E, 0x33, 0x2C, 0x31, 0x30,
            0x31, 0x2E, 0x32, 0x3C, 0x2F, 0x67, 0x6D, 0x6C,
            0x3A, 0x74, 0x75, 0x70, 0x6C, 0x65, 0x4C, 0x69,
            0x73, 0x74, 0x3E, 0x3C, 0x2F, 0x67, 0x6D, 0x6C,
            0x3A, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6C, 0x6F,
            0x63, 0x6B, 0x3E};
        verifyNoLoggerMessages();
        VFeatureLS localSet = new VFeatureLS(bytes);
        this.verifySingleLoggerMessage("Unknown VMTI VFeature Metadata tag: 3");
        assertNotNull(localSet);
        assertEquals(localSet.getTags().size(), 2);
        checkSchemaExample(localSet);
        checkSchemaFeatureExample(localSet);
    }

    public static void checkSchemaExample(VFeatureLS localSet) throws URISyntaxException
    {
        final String stringVal = "urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6";
        assertTrue(localSet.getTags().contains(VFeatureMetadataKey.schema));
        IVmtiMetadataValue v = localSet.getField(VFeatureMetadataKey.schema);
        assertEquals(v.getDisplayName(), "Schema");
        assertEquals(v.getDisplayName(), VmtiUri.VFEATURE_SCHEMA);
        assertEquals(v.getDisplayableValue(), stringVal);
        assertTrue(v instanceof VmtiUri);
        VmtiUri text = (VmtiUri) localSet.getField(VFeatureMetadataKey.schema);
        assertEquals(text.getUri().toString(), stringVal);
    }

    public static void checkSchemaFeatureExample(VFeatureLS localSet) throws URISyntaxException
    {
        final String stringVal = "<gml:DataBlock><gml:rangeParameters><gml:CompositeValue><gml:valueComponents><Temperature uom=\"urn:x-si:v1999:uom:degreesC\">template</Temperature><Pressure uom=\"urn:x-si:v1999:uom:kPa\">template</Pressure></gml:valueComponents></gml:CompositeValue></gml:rangeParameters><gml:tupleList>3,101.2</gml:tupleList></gml:DataBlock>";
        assertTrue(localSet.getTags().contains(VFeatureMetadataKey.schemaFeature));
        IVmtiMetadataValue v = localSet.getField(VFeatureMetadataKey.schemaFeature);
        assertEquals(v.getDisplayName(), "Schema Feature");
        assertEquals(v.getDisplayName(), VmtiTextString.VFEATURE_SCHEMA_FEATURE);
        assertEquals(v.getDisplayableValue(), stringVal);
        assertEquals(v.getBytes(), new byte[]{
            0x3C, 0x67, 0x6D, 0x6C, 0x3A, 0x44, 0x61, 0x74,
            0x61, 0x42, 0x6C, 0x6F, 0x63, 0x6B, 0x3E, 0x3C,
            0x67, 0x6D, 0x6C, 0x3A, 0x72, 0x61, 0x6E, 0x67,
            0x65, 0x50, 0x61, 0x72, 0x61, 0x6D, 0x65, 0x74,
            0x65, 0x72, 0x73, 0x3E, 0x3C, 0x67, 0x6D, 0x6C,
            0x3A, 0x43, 0x6F, 0x6D, 0x70, 0x6F, 0x73, 0x69,
            0x74, 0x65, 0x56, 0x61, 0x6C, 0x75, 0x65, 0x3E,
            0x3C, 0x67, 0x6D, 0x6C, 0x3A, 0x76, 0x61, 0x6C,
            0x75, 0x65, 0x43, 0x6F, 0x6D, 0x70, 0x6F, 0x6E,
            0x65, 0x6E, 0x74, 0x73, 0x3E, 0x3C, 0x54, 0x65,
            0x6D, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
            0x65, 0x20, 0x75, 0x6F, 0x6D, 0x3D, 0x22, 0x75,
            0x72, 0x6E, 0x3A, 0x78, 0x2D, 0x73, 0x69, 0x3A,
            0x76, 0x31, 0x39, 0x39, 0x39, 0x3A, 0x75, 0x6F,
            0x6D, 0x3A, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65,
            0x73, 0x43, 0x22, 0x3E, 0x74, 0x65, 0x6D, 0x70,
            0x6C, 0x61, 0x74, 0x65, 0x3C, 0x2F, 0x54, 0x65,
            0x6D, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
            0x65, 0x3E, 0x3C, 0x50, 0x72, 0x65, 0x73, 0x73,
            0x75, 0x72, 0x65, 0x20, 0x75, 0x6F, 0x6D, 0x3D,
            0x22, 0x75, 0x72, 0x6E, 0x3A, 0x78, 0x2D, 0x73,
            0x69, 0x3A, 0x76, 0x31, 0x39, 0x39, 0x39, 0x3A,
            0x75, 0x6F, 0x6D, 0x3A, 0x6B, 0x50, 0x61, 0x22,
            0x3E, 0x74, 0x65, 0x6D, 0x70, 0x6C, 0x61, 0x74,
            0x65, 0x3C, 0x2F, 0x50, 0x72, 0x65, 0x73, 0x73,
            0x75, 0x72, 0x65, 0x3E, 0x3C, 0x2F, 0x67, 0x6D,
            0x6C, 0x3A, 0x76, 0x61, 0x6C, 0x75, 0x65, 0x43,
            0x6F, 0x6D, 0x70, 0x6F, 0x6E, 0x65, 0x6E, 0x74,
            0x73, 0x3E, 0x3C, 0x2F, 0x67, 0x6D, 0x6C, 0x3A,
            0x43, 0x6F, 0x6D, 0x70, 0x6F, 0x73, 0x69, 0x74,
            0x65, 0x56, 0x61, 0x6C, 0x75, 0x65, 0x3E, 0x3C,
            0x2F, 0x67, 0x6D, 0x6C, 0x3A, 0x72, 0x61, 0x6E,
            0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6D, 0x65,
            0x74, 0x65, 0x72, 0x73, 0x3E, 0x3C, 0x67, 0x6D,
            0x6C, 0x3A, 0x74, 0x75, 0x70, 0x6C, 0x65, 0x4C,
            0x69, 0x73, 0x74, 0x3E, 0x33, 0x2C, 0x31, 0x30,
            0x31, 0x2E, 0x32, 0x3C, 0x2F, 0x67, 0x6D, 0x6C,
            0x3A, 0x74, 0x75, 0x70, 0x6C, 0x65, 0x4C, 0x69,
            0x73, 0x74, 0x3E, 0x3C, 0x2F, 0x67, 0x6D, 0x6C,
            0x3A, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6C, 0x6F,
            0x63, 0x6B, 0x3E});
        assertTrue(v instanceof VmtiTextString);
        VmtiTextString text = (VmtiTextString) localSet.getField(VFeatureMetadataKey.schemaFeature);
        assertEquals(text.getValue(), stringVal);
    }

    @Test
    public void createUnknownTag() throws KlvParseException
    {
        final byte[] bytes = new byte[]{0x6A, 0x70};
        verifyNoLoggerMessages();
        IVmtiMetadataValue value = VFeatureLS.createValue(VFeatureMetadataKey.Undefined, bytes);
        verifySingleLoggerMessage("Unrecognized VFeature tag: Undefined");
        assertNull(value);
    }


    @Test
    public void constructFromMap() throws KlvParseException, URISyntaxException, IOException
    {
        Map<VFeatureMetadataKey, IVmtiMetadataValue> values = new HashMap<>();
        IVmtiMetadataValue schema = new VmtiUri(VmtiUri.VFEATURE_SCHEMA, "urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6");
        values.put(VFeatureMetadataKey.schema, schema);
        IVmtiMetadataValue schemaFeature = new VmtiTextString(VmtiTextString.VFEATURE_SCHEMA_FEATURE, "<gml:DataBlock><gml:rangeParameters><gml:CompositeValue><gml:valueComponents><Temperature uom=\"urn:x-si:v1999:uom:degreesC\">template</Temperature><Pressure uom=\"urn:x-si:v1999:uom:kPa\">template</Pressure></gml:valueComponents></gml:CompositeValue></gml:rangeParameters><gml:tupleList>3,101.2</gml:tupleList></gml:DataBlock>");
        values.put(VFeatureMetadataKey.schemaFeature, schemaFeature);
        VFeatureLS vfeatureLS = new VFeatureLS(values);
        assertNotNull(vfeatureLS);
        assertEquals(vfeatureLS.getTags().size(), 2);
        checkSchemaExample(vfeatureLS);
        checkSchemaFeatureExample(vfeatureLS);
        byte[] expectedBytes = new byte[]{
            0x01, 45,
            0x75, 0x72, 0x6e, 0x3a, 0x75, 0x75, 0x69, 0x64,
            0x3a, 0x66, 0x38, 0x31, 0x64, 0x34, 0x66, 0x61,
            0x65, 0x2d, 0x37, 0x64, 0x65, 0x63, 0x2d, 0x31,
            0x31, 0x64, 0x30, 0x2d, 0x61, 0x37, 0x36, 0x35,
            0x2d, 0x30, 0x30, 0x61, 0x30, 0x63, 0x39, 0x31,
            0x65, 0x36, 0x62, 0x66, 0x36,
            0x02,
            (byte)0x82, 0x01, 0x43,
            0x3C, 0x67, 0x6D, 0x6C, 0x3A, 0x44, 0x61, 0x74,
            0x61, 0x42, 0x6C, 0x6F, 0x63, 0x6B, 0x3E, 0x3C,
            0x67, 0x6D, 0x6C, 0x3A, 0x72, 0x61, 0x6E, 0x67,
            0x65, 0x50, 0x61, 0x72, 0x61, 0x6D, 0x65, 0x74,
            0x65, 0x72, 0x73, 0x3E, 0x3C, 0x67, 0x6D, 0x6C,
            0x3A, 0x43, 0x6F, 0x6D, 0x70, 0x6F, 0x73, 0x69,
            0x74, 0x65, 0x56, 0x61, 0x6C, 0x75, 0x65, 0x3E,
            0x3C, 0x67, 0x6D, 0x6C, 0x3A, 0x76, 0x61, 0x6C,
            0x75, 0x65, 0x43, 0x6F, 0x6D, 0x70, 0x6F, 0x6E,
            0x65, 0x6E, 0x74, 0x73, 0x3E, 0x3C, 0x54, 0x65,
            0x6D, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
            0x65, 0x20, 0x75, 0x6F, 0x6D, 0x3D, 0x22, 0x75,
            0x72, 0x6E, 0x3A, 0x78, 0x2D, 0x73, 0x69, 0x3A,
            0x76, 0x31, 0x39, 0x39, 0x39, 0x3A, 0x75, 0x6F,
            0x6D, 0x3A, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65,
            0x73, 0x43, 0x22, 0x3E, 0x74, 0x65, 0x6D, 0x70,
            0x6C, 0x61, 0x74, 0x65, 0x3C, 0x2F, 0x54, 0x65,
            0x6D, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
            0x65, 0x3E, 0x3C, 0x50, 0x72, 0x65, 0x73, 0x73,
            0x75, 0x72, 0x65, 0x20, 0x75, 0x6F, 0x6D, 0x3D,
            0x22, 0x75, 0x72, 0x6E, 0x3A, 0x78, 0x2D, 0x73,
            0x69, 0x3A, 0x76, 0x31, 0x39, 0x39, 0x39, 0x3A,
            0x75, 0x6F, 0x6D, 0x3A, 0x6B, 0x50, 0x61, 0x22,
            0x3E, 0x74, 0x65, 0x6D, 0x70, 0x6C, 0x61, 0x74,
            0x65, 0x3C, 0x2F, 0x50, 0x72, 0x65, 0x73, 0x73,
            0x75, 0x72, 0x65, 0x3E, 0x3C, 0x2F, 0x67, 0x6D,
            0x6C, 0x3A, 0x76, 0x61, 0x6C, 0x75, 0x65, 0x43,
            0x6F, 0x6D, 0x70, 0x6F, 0x6E, 0x65, 0x6E, 0x74,
            0x73, 0x3E, 0x3C, 0x2F, 0x67, 0x6D, 0x6C, 0x3A,
            0x43, 0x6F, 0x6D, 0x70, 0x6F, 0x73, 0x69, 0x74,
            0x65, 0x56, 0x61, 0x6C, 0x75, 0x65, 0x3E, 0x3C,
            0x2F, 0x67, 0x6D, 0x6C, 0x3A, 0x72, 0x61, 0x6E,
            0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6D, 0x65,
            0x74, 0x65, 0x72, 0x73, 0x3E, 0x3C, 0x67, 0x6D,
            0x6C, 0x3A, 0x74, 0x75, 0x70, 0x6C, 0x65, 0x4C,
            0x69, 0x73, 0x74, 0x3E, 0x33, 0x2C, 0x31, 0x30,
            0x31, 0x2E, 0x32, 0x3C, 0x2F, 0x67, 0x6D, 0x6C,
            0x3A, 0x74, 0x75, 0x70, 0x6C, 0x65, 0x4C, 0x69,
            0x73, 0x74, 0x3E, 0x3C, 0x2F, 0x67, 0x6D, 0x6C,
            0x3A, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6C, 0x6F,
            0x63, 0x6B, 0x3E};
        assertEquals(vfeatureLS.getBytes(), expectedBytes);
    }
}

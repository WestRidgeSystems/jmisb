package org.jmisb.api.klv.st1204;

import static org.jmisb.api.klv.st1204.CheckValue.P_PERMUTATIONS;
import static org.jmisb.api.klv.st1204.CheckValue.Q_PERMUTATIONS;
import static org.jmisb.api.klv.st1204.CheckValue.checkHexString;
import static org.jmisb.api.klv.st1204.CheckValue.checkString;
import static org.jmisb.api.klv.st1204.CheckValue.pMap;
import static org.jmisb.api.klv.st1204.CheckValue.qMap;
import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotNull;
import org.testng.annotations.Test;


/**
 * These tests validate implementation of ST1204 Appendix B.
 */
public class CheckValueTest {
    
    static int[][] expectedPArray = {
        { 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF},
        { 0x0, 0x2, 0x4, 0x6, 0x8, 0xA, 0xC, 0xE, 0x9, 0xB, 0xD, 0xF, 0x1, 0x3, 0x5, 0x7},
        { 0x0, 0x4, 0x8, 0xC, 0x9, 0xD, 0x1, 0x5, 0xB, 0xF, 0x3, 0x7, 0x2, 0x6, 0xA, 0xE},
        { 0x0, 0x8, 0x9, 0x1, 0xB, 0x3, 0x2, 0xA, 0xF, 0x7, 0x6, 0xE, 0x4, 0xC, 0xD, 0x5},
        { 0x0, 0x9, 0xB, 0x2, 0xF, 0x6, 0x4, 0xD, 0x7, 0xE, 0xC, 0x5, 0x8, 0x1, 0x3, 0xA},
        { 0x0, 0xB, 0xF, 0x4, 0x7, 0xC, 0x8, 0x3, 0xE, 0x5, 0x1, 0xA, 0x9, 0x2, 0x6, 0xD},
        { 0x0, 0xF, 0x7, 0x8, 0xE, 0x1, 0x9, 0x6, 0x5, 0xA, 0x2, 0xD, 0xB, 0x4, 0xC, 0x3},
        { 0x0, 0x7, 0xE, 0x9, 0x5, 0x2, 0xB, 0xC, 0xA, 0xD, 0x4, 0x3, 0xF, 0x8, 0x1, 0x6},
        { 0x0, 0xE, 0x5, 0xB, 0xA, 0x4, 0xF, 0x1, 0xD, 0x3, 0x8, 0x6, 0x7, 0x9, 0x2, 0xC},
        { 0x0, 0x5, 0xA, 0xF, 0xD, 0x8, 0x7, 0x2, 0x3, 0x6, 0x9, 0xC, 0xE, 0xB, 0x4, 0x1},
        { 0x0, 0xA, 0xD, 0x7, 0x3, 0x9, 0xE, 0x4, 0x6, 0xC, 0xB, 0x1, 0x5, 0xF, 0x8, 0x2},
        { 0x0, 0xD, 0x3, 0xE, 0x6, 0xB, 0x5, 0x8, 0xC, 0x1, 0xF, 0x2, 0xA, 0x7, 0x9, 0x4},
        { 0x0, 0x3, 0x6, 0x5, 0xC, 0xF, 0xA, 0x9, 0x1, 0x2, 0x7, 0x4, 0xD, 0xE, 0xB, 0x8},
        { 0x0, 0x6, 0xC, 0xA, 0x1, 0x7, 0xD, 0xB, 0x2, 0x4, 0xE, 0x8, 0x3, 0x5, 0xF, 0x9},
        { 0x0, 0xC, 0x1, 0xD, 0x2, 0xE, 0x3, 0xF, 0x4, 0x8, 0x5, 0x9, 0x6, 0xA, 0x7, 0xB}
    };

    static int[][] expectedQArray = {
        { 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF},
        { 0x0, 0xC, 0x1, 0xD, 0x2, 0xE, 0x3, 0xF, 0x4, 0x8, 0x5, 0x9, 0x6, 0xA, 0x7, 0xB},
        { 0x0, 0x6, 0xC, 0xA, 0x1, 0x7, 0xD, 0xB, 0x2, 0x4, 0xE, 0x8, 0x3, 0x5, 0xF, 0x9},
        { 0x0, 0x3, 0x6, 0x5, 0xC, 0xF, 0xA, 0x9, 0x1, 0x2, 0x7, 0x4, 0xD, 0xE, 0xB, 0x8},
        { 0x0, 0xD, 0x3, 0xE, 0x6, 0xB, 0x5, 0x8, 0xC, 0x1, 0xF, 0x2, 0xA, 0x7, 0x9, 0x4},
        { 0x0, 0xA, 0xD, 0x7, 0x3, 0x9, 0xE, 0x4, 0x6, 0xC, 0xB, 0x1, 0x5, 0xF, 0x8, 0x2},
        { 0x0, 0x5, 0xA, 0xF, 0xD, 0x8, 0x7, 0x2, 0x3, 0x6, 0x9, 0xC, 0xE, 0xB, 0x4, 0x1},
        { 0x0, 0xE, 0x5, 0xB, 0xA, 0x4, 0xF, 0x1, 0xD, 0x3, 0x8, 0x6, 0x7, 0x9, 0x2, 0xC},
        { 0x0, 0x7, 0xE, 0x9, 0x5, 0x2, 0xB, 0xC, 0xA, 0xD, 0x4, 0x3, 0xF, 0x8, 0x1, 0x6},
        { 0x0, 0xF, 0x7, 0x8, 0xE, 0x1, 0x9, 0x6, 0x5, 0xA, 0x2, 0xD, 0xB, 0x4, 0xC, 0x3},
        { 0x0, 0xB, 0xF, 0x4, 0x7, 0xC, 0x8, 0x3, 0xE, 0x5, 0x1, 0xA, 0x9, 0x2, 0x6, 0xD},
        { 0x0, 0x9, 0xB, 0x2, 0xF, 0x6, 0x4, 0xD, 0x7, 0xE, 0xC, 0x5, 0x8, 0x1, 0x3, 0xA},
        { 0x0, 0x8, 0x9, 0x1, 0xB, 0x3, 0x2, 0xA, 0xF, 0x7, 0x6, 0xE, 0x4, 0xC, 0xD, 0x5},
        { 0x0, 0x4, 0x8, 0xC, 0x9, 0xD, 0x1, 0x5, 0xB, 0xF, 0x3, 0x7, 0x2, 0x6, 0xA, 0xE},
        { 0x0, 0x2, 0x4, 0x6, 0x8, 0xA, 0xC, 0xE, 0x9, 0xB, 0xD, 0xF, 0x1, 0x3, 0x5, 0x7}
    };
 
    public CheckValueTest() {
    }

    @Test
    public void checkPMapFunction() {
        assertEquals(pMap(13), 3);
    }

    @Test
    public void checkQMapFunction() {
        assertEquals(qMap(13), 0xA);
    }
    
    @Test
    public void checkPtable() {
        assertEquals(P_PERMUTATIONS, expectedPArray);
    }
    
    @Test
    public void checkQtable() {
        assertEquals(Q_PERMUTATIONS, expectedQArray);
    }
    
    @Test
    public void checkValueCalc() {
        // This is the example from B.2
        assertEquals(checkHexString("031FA3"), 0x79);
    }
    
    @Test
    public void checkValueCalcDirtyString() {
        assertEquals(checkString("03: 1F-A/3"), 0x79);
    }
    
    @Test
    public void constructorCheck() {
        CheckValue checkValue = new CheckValue();
        assertNotNull(checkValue);
    }
}
